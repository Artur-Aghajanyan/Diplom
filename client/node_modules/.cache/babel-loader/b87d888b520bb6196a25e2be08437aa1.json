{"ast":null,"code":"import assertString from './util/assertString';\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nexport default function isISIN(str) {\n  assertString(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var _double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n\n        if (_double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n\n        _double = !_double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n\n      if (_double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n\n      _double = !_double;\n    }\n  }\n\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isISIN.js"],"names":["assertString","isin","isISIN","str","test","_double","sum","i","length","value","charCodeAt","lo","hi","Math","trunc","_i","_arr","digit","_digit","check"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,IAAIC,IAAI,GAAG,4BAAX,C,CAAyC;AACzC;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AAClCH,EAAAA,YAAY,CAACG,GAAD,CAAZ;;AAEA,MAAI,CAACF,IAAI,CAACG,IAAL,CAAUD,GAAV,CAAL,EAAqB;AACnB,WAAO,KAAP;AACD;;AAED,MAAIE,OAAO,GAAG,IAAd;AACA,MAAIC,GAAG,GAAG,CAAV,CARkC,CAQrB;;AAEb,OAAK,IAAIC,CAAC,GAAGJ,GAAG,CAACK,MAAJ,GAAa,CAA1B,EAA6BD,CAAC,IAAI,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACxC,QAAIJ,GAAG,CAACI,CAAD,CAAH,IAAU,GAAV,IAAiBJ,GAAG,CAACI,CAAD,CAAH,IAAU,GAA/B,EAAoC;AAClC,UAAIE,KAAK,GAAGN,GAAG,CAACI,CAAD,CAAH,CAAOG,UAAP,CAAkB,CAAlB,IAAuB,EAAnC;AACA,UAAIC,EAAE,GAAGF,KAAK,GAAG,EAAjB;AACA,UAAIG,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,GAAG,EAAnB,CAAT,CAHkC,CAGD;AACjC;;AAEA,WAAK,IAAIM,EAAE,GAAG,CAAT,EAAYC,IAAI,GAAG,CAACL,EAAD,EAAKC,EAAL,CAAxB,EAAkCG,EAAE,GAAGC,IAAI,CAACR,MAA5C,EAAoDO,EAAE,EAAtD,EAA0D;AACxD,YAAIE,KAAK,GAAGD,IAAI,CAACD,EAAD,CAAhB;;AAEA,YAAIV,OAAJ,EAAa;AACX,cAAIY,KAAK,IAAI,CAAb,EAAgB;AACdX,YAAAA,GAAG,IAAI,IAAI,CAACW,KAAK,GAAG,CAAT,IAAc,CAAzB;AACD,WAFD,MAEO;AACLX,YAAAA,GAAG,IAAIW,KAAK,GAAG,CAAf;AACD;AACF,SAND,MAMO;AACLX,UAAAA,GAAG,IAAIW,KAAP;AACD;;AAEDZ,QAAAA,OAAO,GAAG,CAACA,OAAX;AACD;AACF,KArBD,MAqBO;AACL,UAAIa,MAAM,GAAGf,GAAG,CAACI,CAAD,CAAH,CAAOG,UAAP,CAAkB,CAAlB,IAAuB,IAAIA,UAAJ,CAAe,CAAf,CAApC;;AAEA,UAAIL,OAAJ,EAAa;AACX,YAAIa,MAAM,IAAI,CAAd,EAAiB;AACfZ,UAAAA,GAAG,IAAI,IAAI,CAACY,MAAM,GAAG,CAAV,IAAe,CAA1B;AACD,SAFD,MAEO;AACLZ,UAAAA,GAAG,IAAIY,MAAM,GAAG,CAAhB;AACD;AACF,OAND,MAMO;AACLZ,QAAAA,GAAG,IAAIY,MAAP;AACD;;AAEDb,MAAAA,OAAO,GAAG,CAACA,OAAX;AACD;AACF;;AAED,MAAIc,KAAK,GAAGN,IAAI,CAACC,KAAL,CAAW,CAACR,GAAG,GAAG,CAAP,IAAY,EAAvB,IAA6B,EAA7B,GAAkCA,GAA9C;AACA,SAAO,CAACH,GAAG,CAACA,GAAG,CAACK,MAAJ,GAAa,CAAd,CAAJ,KAAyBW,KAAhC;AACD","sourcesContent":["import assertString from './util/assertString';\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/; // this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nexport default function isISIN(str) {\n  assertString(str);\n\n  if (!isin.test(str)) {\n    return false;\n  }\n\n  var _double = true;\n  var sum = 0; // convert values\n\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10); // letters have two digits, so handle the low order\n      // and high order digits separately.\n\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n\n        if (_double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n\n        _double = !_double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n\n      if (_double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n\n      _double = !_double;\n    }\n  }\n\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}"]},"metadata":{},"sourceType":"module"}