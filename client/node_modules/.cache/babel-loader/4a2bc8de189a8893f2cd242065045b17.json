{"ast":null,"code":"import merge from './util/merge';\nvar default_normalize_email_options = {\n  // The following options apply to all email addresses\n  // Lowercases the local part of the email address.\n  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).\n  // The domain is always lowercased, as per RFC 1035\n  all_lowercase: true,\n  // The following conversions are specific to GMail\n  // Lowercases the local part of the GMail address (known to be case-insensitive)\n  gmail_lowercase: true,\n  // Removes dots from the local part of the email address, as that's ignored by GMail\n  gmail_remove_dots: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  gmail_remove_subaddress: true,\n  // Conversts the googlemail.com domain to gmail.com\n  gmail_convert_googlemaildotcom: true,\n  // The following conversions are specific to Outlook.com / Windows Live / Hotmail\n  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)\n  outlookdotcom_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  outlookdotcom_remove_subaddress: true,\n  // The following conversions are specific to Yahoo\n  // Lowercases the local part of the Yahoo address (known to be case-insensitive)\n  yahoo_lowercase: true,\n  // Removes the subaddress (e.g. \"-foo\") from the email address\n  yahoo_remove_subaddress: true,\n  // The following conversions are specific to Yandex\n  // Lowercases the local part of the Yandex address (known to be case-insensitive)\n  yandex_lowercase: true,\n  // The following conversions are specific to iCloud\n  // Lowercases the local part of the iCloud address (known to be case-insensitive)\n  icloud_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  icloud_remove_subaddress: true\n}; // List of domains used by iCloud\n\nvar icloud_domains = ['icloud.com', 'me.com']; // List of domains used by Outlook.com and its predecessors\n// This list is likely incomplete.\n// Partial reference:\n// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/\n\nvar outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com']; // List of domains used by Yahoo Mail\n// This list is likely incomplete\n\nvar yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com']; // List of domains used by yandex.ru\n\nvar yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru']; // replace single dots, but not multiple consecutive dots\n\nfunction dotsReplacer(match) {\n  if (match.length > 1) {\n    return match;\n  }\n\n  return '';\n}\n\nexport default function normalizeEmail(email, options) {\n  options = merge(options, default_normalize_email_options);\n  var raw_parts = email.split('@');\n  var domain = raw_parts.pop();\n  var user = raw_parts.join('@');\n  var parts = [user, domain]; // The domain is always lowercased, as it's case-insensitive per RFC 1035\n\n  parts[1] = parts[1].toLowerCase();\n\n  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {\n    // Address is GMail\n    if (options.gmail_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (options.gmail_remove_dots) {\n      // this does not replace consecutive dots like example..email@gmail.com\n      parts[0] = parts[0].replace(/\\.+/g, dotsReplacer);\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.gmail_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n\n    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];\n  } else if (icloud_domains.indexOf(parts[1]) >= 0) {\n    // Address is iCloud\n    if (options.icloud_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.icloud_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {\n    // Address is Outlook.com\n    if (options.outlookdotcom_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.outlookdotcom_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {\n    // Address is Yahoo\n    if (options.yahoo_remove_subaddress) {\n      var components = parts[0].split('-');\n      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.yahoo_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yandex_domains.indexOf(parts[1]) >= 0) {\n    if (options.all_lowercase || options.yandex_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n\n    parts[1] = 'yandex.ru'; // all yandex domains are equal, 1st preferred\n  } else if (options.all_lowercase) {\n    // Any other address\n    parts[0] = parts[0].toLowerCase();\n  }\n\n  return parts.join('@');\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/normalizeEmail.js"],"names":["merge","default_normalize_email_options","all_lowercase","gmail_lowercase","gmail_remove_dots","gmail_remove_subaddress","gmail_convert_googlemaildotcom","outlookdotcom_lowercase","outlookdotcom_remove_subaddress","yahoo_lowercase","yahoo_remove_subaddress","yandex_lowercase","icloud_lowercase","icloud_remove_subaddress","icloud_domains","outlookdotcom_domains","yahoo_domains","yandex_domains","dotsReplacer","match","length","normalizeEmail","email","options","raw_parts","split","domain","pop","user","join","parts","toLowerCase","replace","indexOf","components","slice"],"mappings":"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","sourcesContent":["import merge from './util/merge';\nvar default_normalize_email_options = {\n  // The following options apply to all email addresses\n  // Lowercases the local part of the email address.\n  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).\n  // The domain is always lowercased, as per RFC 1035\n  all_lowercase: true,\n  // The following conversions are specific to GMail\n  // Lowercases the local part of the GMail address (known to be case-insensitive)\n  gmail_lowercase: true,\n  // Removes dots from the local part of the email address, as that's ignored by GMail\n  gmail_remove_dots: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  gmail_remove_subaddress: true,\n  // Conversts the googlemail.com domain to gmail.com\n  gmail_convert_googlemaildotcom: true,\n  // The following conversions are specific to Outlook.com / Windows Live / Hotmail\n  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)\n  outlookdotcom_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  outlookdotcom_remove_subaddress: true,\n  // The following conversions are specific to Yahoo\n  // Lowercases the local part of the Yahoo address (known to be case-insensitive)\n  yahoo_lowercase: true,\n  // Removes the subaddress (e.g. \"-foo\") from the email address\n  yahoo_remove_subaddress: true,\n  // The following conversions are specific to Yandex\n  // Lowercases the local part of the Yandex address (known to be case-insensitive)\n  yandex_lowercase: true,\n  // The following conversions are specific to iCloud\n  // Lowercases the local part of the iCloud address (known to be case-insensitive)\n  icloud_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  icloud_remove_subaddress: true\n}; // List of domains used by iCloud\n\nvar icloud_domains = ['icloud.com', 'me.com']; // List of domains used by Outlook.com and its predecessors\n// This list is likely incomplete.\n// Partial reference:\n// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/\n\nvar outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com']; // List of domains used by Yahoo Mail\n// This list is likely incomplete\n\nvar yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com']; // List of domains used by yandex.ru\n\nvar yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru']; // replace single dots, but not multiple consecutive dots\n\nfunction dotsReplacer(match) {\n  if (match.length > 1) {\n    return match;\n  }\n\n  return '';\n}\n\nexport default function normalizeEmail(email, options) {\n  options = merge(options, default_normalize_email_options);\n  var raw_parts = email.split('@');\n  var domain = raw_parts.pop();\n  var user = raw_parts.join('@');\n  var parts = [user, domain]; // The domain is always lowercased, as it's case-insensitive per RFC 1035\n\n  parts[1] = parts[1].toLowerCase();\n\n  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {\n    // Address is GMail\n    if (options.gmail_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (options.gmail_remove_dots) {\n      // this does not replace consecutive dots like example..email@gmail.com\n      parts[0] = parts[0].replace(/\\.+/g, dotsReplacer);\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.gmail_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n\n    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];\n  } else if (icloud_domains.indexOf(parts[1]) >= 0) {\n    // Address is iCloud\n    if (options.icloud_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.icloud_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {\n    // Address is Outlook.com\n    if (options.outlookdotcom_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.outlookdotcom_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {\n    // Address is Yahoo\n    if (options.yahoo_remove_subaddress) {\n      var components = parts[0].split('-');\n      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];\n    }\n\n    if (!parts[0].length) {\n      return false;\n    }\n\n    if (options.all_lowercase || options.yahoo_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yandex_domains.indexOf(parts[1]) >= 0) {\n    if (options.all_lowercase || options.yandex_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n\n    parts[1] = 'yandex.ru'; // all yandex domains are equal, 1st preferred\n  } else if (options.all_lowercase) {\n    // Any other address\n    parts[0] = parts[0].toLowerCase();\n  }\n\n  return parts.join('@');\n}"]},"metadata":{},"sourceType":"module"}