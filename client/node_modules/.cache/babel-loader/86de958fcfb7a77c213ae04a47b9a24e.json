{"ast":null,"code":"import assertString from './util/assertString';\nimport { decimal } from './alpha';\nexport default function isFloat(str, options) {\n  assertString(str);\n  options = options || {};\n\n  var _float = new RegExp(\"^(?:[-+])?(?:[0-9]+)?(?:\\\\\".concat(options.locale ? decimal[options.locale] : '.', \"[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$\"));\n\n  if (str === '' || str === '.' || str === '-' || str === '+') {\n    return false;\n  }\n\n  var value = parseFloat(str.replace(',', '.'));\n  return _float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);\n}\nexport var locales = Object.keys(decimal);","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isFloat.js"],"names":["assertString","decimal","isFloat","str","options","_float","RegExp","concat","locale","value","parseFloat","replace","test","hasOwnProperty","min","max","lt","gt","locales","Object","keys"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,eAAe,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC5CJ,EAAAA,YAAY,CAACG,GAAD,CAAZ;AACAC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,6BAA6BC,MAA7B,CAAoCH,OAAO,CAACI,MAAR,GAAiBP,OAAO,CAACG,OAAO,CAACI,MAAT,CAAxB,GAA2C,GAA/E,EAAoF,uCAApF,CAAX,CAAb;;AAEA,MAAIL,GAAG,KAAK,EAAR,IAAcA,GAAG,KAAK,GAAtB,IAA6BA,GAAG,KAAK,GAArC,IAA4CA,GAAG,KAAK,GAAxD,EAA6D;AAC3D,WAAO,KAAP;AACD;;AAED,MAAIM,KAAK,GAAGC,UAAU,CAACP,GAAG,CAACQ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAD,CAAtB;AACA,SAAON,MAAM,CAACO,IAAP,CAAYT,GAAZ,MAAqB,CAACC,OAAO,CAACS,cAAR,CAAuB,KAAvB,CAAD,IAAkCJ,KAAK,IAAIL,OAAO,CAACU,GAAxE,MAAiF,CAACV,OAAO,CAACS,cAAR,CAAuB,KAAvB,CAAD,IAAkCJ,KAAK,IAAIL,OAAO,CAACW,GAApI,MAA6I,CAACX,OAAO,CAACS,cAAR,CAAuB,IAAvB,CAAD,IAAiCJ,KAAK,GAAGL,OAAO,CAACY,EAA9L,MAAsM,CAACZ,OAAO,CAACS,cAAR,CAAuB,IAAvB,CAAD,IAAiCJ,KAAK,GAAGL,OAAO,CAACa,EAAvP,CAAP;AACD;AACD,OAAO,IAAIC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYnB,OAAZ,CAAd","sourcesContent":["import assertString from './util/assertString';\nimport { decimal } from './alpha';\nexport default function isFloat(str, options) {\n  assertString(str);\n  options = options || {};\n\n  var _float = new RegExp(\"^(?:[-+])?(?:[0-9]+)?(?:\\\\\".concat(options.locale ? decimal[options.locale] : '.', \"[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$\"));\n\n  if (str === '' || str === '.' || str === '-' || str === '+') {\n    return false;\n  }\n\n  var value = parseFloat(str.replace(',', '.'));\n  return _float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);\n}\nexport var locales = Object.keys(decimal);"]},"metadata":{},"sourceType":"module"}