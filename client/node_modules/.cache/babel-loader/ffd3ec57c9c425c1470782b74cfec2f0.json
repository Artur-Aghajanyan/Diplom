{"ast":null,"code":"import assertString from './util/assertString';\nimport isIP from './isIP';\nvar subnetMaybe = /^\\d{1,3}$/;\nvar v4Subnet = 32;\nvar v6Subnet = 128;\nexport default function isIPRange(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet\n\n  if (parts.length !== 2) {\n    return false;\n  }\n\n  if (!subnetMaybe.test(parts[1])) {\n    return false;\n  } // Disallow preceding 0 i.e. 01, 02, ...\n\n\n  if (parts[1].length > 1 && parts[1].startsWith('0')) {\n    return false;\n  }\n\n  var isValidIP = isIP(parts[0], version);\n\n  if (!isValidIP) {\n    return false;\n  } // Define valid subnet according to IP's version\n\n\n  var expectedSubnet = null;\n\n  switch (String(version)) {\n    case '4':\n      expectedSubnet = v4Subnet;\n      break;\n\n    case '6':\n      expectedSubnet = v6Subnet;\n      break;\n\n    default:\n      expectedSubnet = isIP(parts[0], '6') ? v6Subnet : v4Subnet;\n  }\n\n  return parts[1] <= expectedSubnet && parts[1] >= 0;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isIPRange.js"],"names":["assertString","isIP","subnetMaybe","v4Subnet","v6Subnet","isIPRange","str","version","arguments","length","undefined","parts","split","test","startsWith","isValidIP","expectedSubnet","String"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,IAAIC,WAAW,GAAG,WAAlB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,eAAe,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACrC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACAR,EAAAA,YAAY,CAACM,GAAD,CAAZ;AACA,MAAIK,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAZ,CAHqC,CAGT;;AAE5B,MAAID,KAAK,CAACF,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,MAAI,CAACP,WAAW,CAACW,IAAZ,CAAiBF,KAAK,CAAC,CAAD,CAAtB,CAAL,EAAiC;AAC/B,WAAO,KAAP;AACD,GAXoC,CAWnC;;;AAGF,MAAIA,KAAK,CAAC,CAAD,CAAL,CAASF,MAAT,GAAkB,CAAlB,IAAuBE,KAAK,CAAC,CAAD,CAAL,CAASG,UAAT,CAAoB,GAApB,CAA3B,EAAqD;AACnD,WAAO,KAAP;AACD;;AAED,MAAIC,SAAS,GAAGd,IAAI,CAACU,KAAK,CAAC,CAAD,CAAN,EAAWJ,OAAX,CAApB;;AAEA,MAAI,CAACQ,SAAL,EAAgB;AACd,WAAO,KAAP;AACD,GAtBoC,CAsBnC;;;AAGF,MAAIC,cAAc,GAAG,IAArB;;AAEA,UAAQC,MAAM,CAACV,OAAD,CAAd;AACE,SAAK,GAAL;AACES,MAAAA,cAAc,GAAGb,QAAjB;AACA;;AAEF,SAAK,GAAL;AACEa,MAAAA,cAAc,GAAGZ,QAAjB;AACA;;AAEF;AACEY,MAAAA,cAAc,GAAGf,IAAI,CAACU,KAAK,CAAC,CAAD,CAAN,EAAW,GAAX,CAAJ,GAAsBP,QAAtB,GAAiCD,QAAlD;AAVJ;;AAaA,SAAOQ,KAAK,CAAC,CAAD,CAAL,IAAYK,cAAZ,IAA8BL,KAAK,CAAC,CAAD,CAAL,IAAY,CAAjD;AACD","sourcesContent":["import assertString from './util/assertString';\nimport isIP from './isIP';\nvar subnetMaybe = /^\\d{1,3}$/;\nvar v4Subnet = 32;\nvar v6Subnet = 128;\nexport default function isIPRange(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  var parts = str.split('/'); // parts[0] -> ip, parts[1] -> subnet\n\n  if (parts.length !== 2) {\n    return false;\n  }\n\n  if (!subnetMaybe.test(parts[1])) {\n    return false;\n  } // Disallow preceding 0 i.e. 01, 02, ...\n\n\n  if (parts[1].length > 1 && parts[1].startsWith('0')) {\n    return false;\n  }\n\n  var isValidIP = isIP(parts[0], version);\n\n  if (!isValidIP) {\n    return false;\n  } // Define valid subnet according to IP's version\n\n\n  var expectedSubnet = null;\n\n  switch (String(version)) {\n    case '4':\n      expectedSubnet = v4Subnet;\n      break;\n\n    case '6':\n      expectedSubnet = v6Subnet;\n      break;\n\n    default:\n      expectedSubnet = isIP(parts[0], '6') ? v6Subnet : v4Subnet;\n  }\n\n  return parts[1] <= expectedSubnet && parts[1] >= 0;\n}"]},"metadata":{},"sourceType":"module"}