{"ast":null,"code":"var _jsxFileName = \"/home/artur97/Diplomayin/client/src/views/pages/HelloWorld.js\",\n    _this = this;\n\nimport React from 'react';\nimport Header from \"../users/Header\";\nimport { CCard, CCardBody } from \"@coreui/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar HelloWorld = function HelloWorld(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      state: props.state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(CCard, {\n      className: \"m-5\",\n      children: /*#__PURE__*/_jsxDEV(CCardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Hello, world!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This part of the tutorial is about core JavaScript, the language itself.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"But we need a working environment to run our scripts and, since this book is online, the browser is a good choice. We\\u2019ll keep the amount of browser-specific commands (like alert) to a minimum so that you don\\u2019t spend time on them if you plan to concentrate on another environment (like Node.js). We\\u2019ll focus on JavaScript in the browser in the next part of the tutorial.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"So first, let\\u2019s see how we attach a script to a webpage. For server-side environments (like Node.js), you can execute the script with a command like \\\"node my.js\\\".\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Modern markup\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The \", \"\\<script\\>\", \" tag has a few attributes that are rarely used nowadays but can still be found in old code:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\"The type attribute: \", \"\\<script type=…\\>\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 16\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The old HTML standard, HTML4, required a script to have a type. Usually it was type=\\\"text/javascript\\\". It\\u2019s not required anymore. Also, the modern HTML standard totally changed the meaning of this attribute. Now, it can be used for JavaScript modules. But that\\u2019s an advanced topic, we\\u2019ll talk about modules in another part of the tutorial.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = HelloWorld;\nexport default HelloWorld;\n\nvar _c;\n\n$RefreshReg$(_c, \"HelloWorld\");","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/src/views/pages/HelloWorld.js"],"names":["React","Header","CCard","CCardBody","HelloWorld","props","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SACEC,KADF,EAEEC,SAFF,QAGO,eAHP;;;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAE5B,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEA,KAAK,CAACC;AAArB;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAC,KAAjB;AAAA,6BACE,QAAC,SAAD;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAVF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAbF,eAcE;AAAA,6BAAQ,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA,iBAdF,eAeE;AAAA,uCAAK;AAAA,+CAAwB,mBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL;AAAA;AAAA;AAAA;AAAA;AAAA,iBAfF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA,kBADF;AAyBD,CA3BD;;KAAMF,U;AA6BN,eAAeA,UAAf","sourcesContent":["import React from 'react'\nimport Header from \"../users/Header\";\nimport {\n  CCard,\n  CCardBody\n} from \"@coreui/react\";\n\nconst HelloWorld = (props) => {\n\n  return (\n    <>\n      <Header state={props.state}/>\n      <CCard className='m-5'>\n        <CCardBody>\n          <h1>Hello, world!</h1>\n          <p>\n            This part of the tutorial is about core JavaScript, the language itself.\n          </p>\n          <p>But we need a working environment to run our scripts and, since this book\n            is online, the browser is a good choice. We’ll keep the amount of browser-specific\n            commands (like alert) to a minimum so that you don’t spend time on them if you plan to\n            concentrate on another environment (like Node.js).\n            We’ll focus on JavaScript in the browser in the next part of the tutorial.</p>\n          <p>So first, let’s see how we attach a script to a webpage.\n            For server-side environments (like Node.js), you can execute the\n            script with a command like \"node my.js\".</p>\n          <h3>Modern markup</h3>\n          <p>The {\"\\<script\\>\"} tag has a few attributes that are rarely used nowadays but can still be found in old code:</p>\n          <h6> <b>The type attribute: {\"\\<script type=…\\>\"}</b></h6>\n          <p>The old HTML standard, HTML4, required a script to have a type. Usually it was type=\"text/javascript\". It’s not required anymore. Also, the modern HTML standard totally changed the meaning of this attribute. Now, it can be used for JavaScript modules. But that’s an advanced topic, we’ll talk about modules in another part of the tutorial.</p>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default HelloWorld;\n"]},"metadata":{},"sourceType":"module"}