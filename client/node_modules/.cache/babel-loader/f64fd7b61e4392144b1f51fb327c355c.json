{"ast":null,"code":"import merge from './util/merge';\nimport assertString from './util/assertString';\nvar upperCaseRegex = /^[A-Z]$/;\nvar lowerCaseRegex = /^[a-z]$/;\nvar numberRegex = /^[0-9]$/;\nvar symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\nvar defaultOptions = {\n  minLength: 8,\n  minLowercase: 1,\n  minUppercase: 1,\n  minNumbers: 1,\n  minSymbols: 1,\n  returnScore: false,\n  pointsPerUnique: 1,\n  pointsPerRepeat: 0.5,\n  pointsForContainingLower: 10,\n  pointsForContainingUpper: 10,\n  pointsForContainingNumber: 10,\n  pointsForContainingSymbol: 10\n};\n/* Counts number of occurrences of each char in a string\n * could be moved to util/ ?\n*/\n\nfunction countChars(str) {\n  var result = {};\n  Array.from(str).forEach(function (_char) {\n    var curVal = result[_char];\n\n    if (curVal) {\n      result[_char] += 1;\n    } else {\n      result[_char] = 1;\n    }\n  });\n  return result;\n}\n/* Return information about a password */\n\n\nfunction analyzePassword(password) {\n  var charMap = countChars(password);\n  var analysis = {\n    length: password.length,\n    uniqueChars: Object.keys(charMap).length,\n    uppercaseCount: 0,\n    lowercaseCount: 0,\n    numberCount: 0,\n    symbolCount: 0\n  };\n  Object.keys(charMap).forEach(function (_char2) {\n    /* istanbul ignore else */\n    if (upperCaseRegex.test(_char2)) {\n      analysis.uppercaseCount += charMap[_char2];\n    } else if (lowerCaseRegex.test(_char2)) {\n      analysis.lowercaseCount += charMap[_char2];\n    } else if (numberRegex.test(_char2)) {\n      analysis.numberCount += charMap[_char2];\n    } else if (symbolRegex.test(_char2)) {\n      analysis.symbolCount += charMap[_char2];\n    }\n  });\n  return analysis;\n}\n\nfunction scorePassword(analysis, scoringOptions) {\n  var points = 0;\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\n\n  if (analysis.lowercaseCount > 0) {\n    points += scoringOptions.pointsForContainingLower;\n  }\n\n  if (analysis.uppercaseCount > 0) {\n    points += scoringOptions.pointsForContainingUpper;\n  }\n\n  if (analysis.numberCount > 0) {\n    points += scoringOptions.pointsForContainingNumber;\n  }\n\n  if (analysis.symbolCount > 0) {\n    points += scoringOptions.pointsForContainingSymbol;\n  }\n\n  return points;\n}\n\nexport default function isStrongPassword(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assertString(str);\n  var analysis = analyzePassword(str);\n  options = merge(options || {}, defaultOptions);\n\n  if (options.returnScore) {\n    return scorePassword(analysis, options);\n  }\n\n  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isStrongPassword.js"],"names":["merge","assertString","upperCaseRegex","lowerCaseRegex","numberRegex","symbolRegex","defaultOptions","minLength","minLowercase","minUppercase","minNumbers","minSymbols","returnScore","pointsPerUnique","pointsPerRepeat","pointsForContainingLower","pointsForContainingUpper","pointsForContainingNumber","pointsForContainingSymbol","countChars","str","result","Array","from","forEach","_char","curVal","analyzePassword","password","charMap","analysis","length","uniqueChars","Object","keys","uppercaseCount","lowercaseCount","numberCount","symbolCount","_char2","test","scorePassword","scoringOptions","points","isStrongPassword","options","arguments","undefined"],"mappings":"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","sourcesContent":["import merge from './util/merge';\nimport assertString from './util/assertString';\nvar upperCaseRegex = /^[A-Z]$/;\nvar lowerCaseRegex = /^[a-z]$/;\nvar numberRegex = /^[0-9]$/;\nvar symbolRegex = /^[-#!$@%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/ ]$/;\nvar defaultOptions = {\n  minLength: 8,\n  minLowercase: 1,\n  minUppercase: 1,\n  minNumbers: 1,\n  minSymbols: 1,\n  returnScore: false,\n  pointsPerUnique: 1,\n  pointsPerRepeat: 0.5,\n  pointsForContainingLower: 10,\n  pointsForContainingUpper: 10,\n  pointsForContainingNumber: 10,\n  pointsForContainingSymbol: 10\n};\n/* Counts number of occurrences of each char in a string\n * could be moved to util/ ?\n*/\n\nfunction countChars(str) {\n  var result = {};\n  Array.from(str).forEach(function (_char) {\n    var curVal = result[_char];\n\n    if (curVal) {\n      result[_char] += 1;\n    } else {\n      result[_char] = 1;\n    }\n  });\n  return result;\n}\n/* Return information about a password */\n\n\nfunction analyzePassword(password) {\n  var charMap = countChars(password);\n  var analysis = {\n    length: password.length,\n    uniqueChars: Object.keys(charMap).length,\n    uppercaseCount: 0,\n    lowercaseCount: 0,\n    numberCount: 0,\n    symbolCount: 0\n  };\n  Object.keys(charMap).forEach(function (_char2) {\n    /* istanbul ignore else */\n    if (upperCaseRegex.test(_char2)) {\n      analysis.uppercaseCount += charMap[_char2];\n    } else if (lowerCaseRegex.test(_char2)) {\n      analysis.lowercaseCount += charMap[_char2];\n    } else if (numberRegex.test(_char2)) {\n      analysis.numberCount += charMap[_char2];\n    } else if (symbolRegex.test(_char2)) {\n      analysis.symbolCount += charMap[_char2];\n    }\n  });\n  return analysis;\n}\n\nfunction scorePassword(analysis, scoringOptions) {\n  var points = 0;\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\n\n  if (analysis.lowercaseCount > 0) {\n    points += scoringOptions.pointsForContainingLower;\n  }\n\n  if (analysis.uppercaseCount > 0) {\n    points += scoringOptions.pointsForContainingUpper;\n  }\n\n  if (analysis.numberCount > 0) {\n    points += scoringOptions.pointsForContainingNumber;\n  }\n\n  if (analysis.symbolCount > 0) {\n    points += scoringOptions.pointsForContainingSymbol;\n  }\n\n  return points;\n}\n\nexport default function isStrongPassword(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  assertString(str);\n  var analysis = analyzePassword(str);\n  options = merge(options || {}, defaultOptions);\n\n  if (options.returnScore) {\n    return scorePassword(analysis, options);\n  }\n\n  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;\n}"]},"metadata":{},"sourceType":"module"}