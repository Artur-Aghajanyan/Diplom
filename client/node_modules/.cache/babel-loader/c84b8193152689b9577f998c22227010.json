{"ast":null,"code":"import assertString from './util/assertString';\nvar isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;\nvar isbn13Maybe = /^(?:[0-9]{13})$/;\nvar factor = [1, 3];\nexport default function isISBN(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n\n  if (!version) {\n    return isISBN(str, 10) || isISBN(str, 13);\n  }\n\n  var sanitized = str.replace(/[\\s-]+/g, '');\n  var checksum = 0;\n  var i;\n\n  if (version === '10') {\n    if (!isbn10Maybe.test(sanitized)) {\n      return false;\n    }\n\n    for (i = 0; i < 9; i++) {\n      checksum += (i + 1) * sanitized.charAt(i);\n    }\n\n    if (sanitized.charAt(9) === 'X') {\n      checksum += 10 * 10;\n    } else {\n      checksum += 10 * sanitized.charAt(9);\n    }\n\n    if (checksum % 11 === 0) {\n      return !!sanitized;\n    }\n  } else if (version === '13') {\n    if (!isbn13Maybe.test(sanitized)) {\n      return false;\n    }\n\n    for (i = 0; i < 12; i++) {\n      checksum += factor[i % 2] * sanitized.charAt(i);\n    }\n\n    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {\n      return !!sanitized;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isISBN.js"],"names":["assertString","isbn10Maybe","isbn13Maybe","factor","isISBN","str","version","arguments","length","undefined","String","sanitized","replace","checksum","i","test","charAt"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,IAAIC,WAAW,GAAG,2BAAlB;AACA,IAAIC,WAAW,GAAG,iBAAlB;AACA,IAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;AACA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqB;AAClC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACAP,EAAAA,YAAY,CAACK,GAAD,CAAZ;AACAC,EAAAA,OAAO,GAAGI,MAAM,CAACJ,OAAD,CAAhB;;AAEA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOF,MAAM,CAACC,GAAD,EAAM,EAAN,CAAN,IAAmBD,MAAM,CAACC,GAAD,EAAM,EAAN,CAAhC;AACD;;AAED,MAAIM,SAAS,GAAGN,GAAG,CAACO,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,CAAhB;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,CAAJ;;AAEA,MAAIR,OAAO,KAAK,IAAhB,EAAsB;AACpB,QAAI,CAACL,WAAW,CAACc,IAAZ,CAAiBJ,SAAjB,CAAL,EAAkC;AAChC,aAAO,KAAP;AACD;;AAED,SAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAhB,EAAmBA,CAAC,EAApB,EAAwB;AACtBD,MAAAA,QAAQ,IAAI,CAACC,CAAC,GAAG,CAAL,IAAUH,SAAS,CAACK,MAAV,CAAiBF,CAAjB,CAAtB;AACD;;AAED,QAAIH,SAAS,CAACK,MAAV,CAAiB,CAAjB,MAAwB,GAA5B,EAAiC;AAC/BH,MAAAA,QAAQ,IAAI,KAAK,EAAjB;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,IAAI,KAAKF,SAAS,CAACK,MAAV,CAAiB,CAAjB,CAAjB;AACD;;AAED,QAAIH,QAAQ,GAAG,EAAX,KAAkB,CAAtB,EAAyB;AACvB,aAAO,CAAC,CAACF,SAAT;AACD;AACF,GAlBD,MAkBO,IAAIL,OAAO,KAAK,IAAhB,EAAsB;AAC3B,QAAI,CAACJ,WAAW,CAACa,IAAZ,CAAiBJ,SAAjB,CAAL,EAAkC;AAChC,aAAO,KAAP;AACD;;AAED,SAAKG,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvBD,MAAAA,QAAQ,IAAIV,MAAM,CAACW,CAAC,GAAG,CAAL,CAAN,GAAgBH,SAAS,CAACK,MAAV,CAAiBF,CAAjB,CAA5B;AACD;;AAED,QAAIH,SAAS,CAACK,MAAV,CAAiB,EAAjB,IAAuB,CAAC,KAAKH,QAAQ,GAAG,EAAjB,IAAuB,EAA9C,KAAqD,CAAzD,EAA4D;AAC1D,aAAO,CAAC,CAACF,SAAT;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["import assertString from './util/assertString';\nvar isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;\nvar isbn13Maybe = /^(?:[0-9]{13})$/;\nvar factor = [1, 3];\nexport default function isISBN(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n\n  if (!version) {\n    return isISBN(str, 10) || isISBN(str, 13);\n  }\n\n  var sanitized = str.replace(/[\\s-]+/g, '');\n  var checksum = 0;\n  var i;\n\n  if (version === '10') {\n    if (!isbn10Maybe.test(sanitized)) {\n      return false;\n    }\n\n    for (i = 0; i < 9; i++) {\n      checksum += (i + 1) * sanitized.charAt(i);\n    }\n\n    if (sanitized.charAt(9) === 'X') {\n      checksum += 10 * 10;\n    } else {\n      checksum += 10 * sanitized.charAt(9);\n    }\n\n    if (checksum % 11 === 0) {\n      return !!sanitized;\n    }\n  } else if (version === '13') {\n    if (!isbn13Maybe.test(sanitized)) {\n      return false;\n    }\n\n    for (i = 0; i < 12; i++) {\n      checksum += factor[i % 2] * sanitized.charAt(i);\n    }\n\n    if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {\n      return !!sanitized;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}