{"ast":null,"code":"import assertString from './util/assertString';\nimport { alpha } from './alpha';\nexport default function isAlpha(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(_str);\n  var str = _str;\n  var ignore = options.ignore;\n\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n\n  if (locale in alpha) {\n    return alpha[locale].test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nexport var locales = Object.keys(alpha);","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isAlpha.js"],"names":["assertString","alpha","isAlpha","_str","locale","arguments","length","undefined","options","str","ignore","RegExp","replace","concat","Error","test","locales","Object","keys"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACpC,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,OAAjF;AACA,MAAIG,OAAO,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;AACAL,EAAAA,YAAY,CAACG,IAAD,CAAZ;AACA,MAAIM,GAAG,GAAGN,IAAV;AACA,MAAIO,MAAM,GAAGF,OAAO,CAACE,MAArB;;AAEA,MAAIA,MAAJ,EAAY;AACV,QAAIA,MAAM,YAAYC,MAAtB,EAA8B;AAC5BF,MAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYF,MAAZ,EAAoB,EAApB,CAAN;AACD,KAFD,MAEO,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACrCD,MAAAA,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAY,IAAID,MAAJ,CAAW,IAAIE,MAAJ,CAAWH,MAAM,CAACE,OAAP,CAAe,2BAAf,EAA4C,MAA5C,CAAX,EAAgE,GAAhE,CAAX,EAAiF,GAAjF,CAAZ,EAAmG,EAAnG,CAAN,CADqC,CACyE;AAC/G,KAFM,MAEA;AACL,YAAM,IAAIE,KAAJ,CAAU,iDAAV,CAAN;AACD;AACF;;AAED,MAAIV,MAAM,IAAIH,KAAd,EAAqB;AACnB,WAAOA,KAAK,CAACG,MAAD,CAAL,CAAcW,IAAd,CAAmBN,GAAnB,CAAP;AACD;;AAED,QAAM,IAAIK,KAAJ,CAAU,mBAAmBD,MAAnB,CAA0BT,MAA1B,EAAkC,GAAlC,CAAV,CAAN;AACD;AACD,OAAO,IAAIY,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYjB,KAAZ,CAAd","sourcesContent":["import assertString from './util/assertString';\nimport { alpha } from './alpha';\nexport default function isAlpha(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  assertString(_str);\n  var str = _str;\n  var ignore = options.ignore;\n\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n\n  if (locale in alpha) {\n    return alpha[locale].test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nexport var locales = Object.keys(alpha);"]},"metadata":{},"sourceType":"module"}