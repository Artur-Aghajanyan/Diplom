{"ast":null,"code":"import merge from './util/merge';\nimport assertString from './util/assertString';\nimport includes from './util/includes';\nimport { decimal } from './alpha';\n\nfunction decimalRegExp(options) {\n  var regExp = new RegExp(\"^[-+]?([0-9]+)?(\\\\\".concat(decimal[options.locale], \"[0-9]{\").concat(options.decimal_digits, \"})\").concat(options.force_decimal ? '' : '?', \"$\"));\n  return regExp;\n}\n\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\nvar blacklist = ['', '-', '+'];\nexport default function isDecimal(str, options) {\n  assertString(str);\n  options = merge(options, default_decimal_options);\n\n  if (options.locale in decimal) {\n    return !includes(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(options.locale, \"'\"));\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isDecimal.js"],"names":["merge","assertString","includes","decimal","decimalRegExp","options","regExp","RegExp","concat","locale","decimal_digits","force_decimal","default_decimal_options","blacklist","isDecimal","str","replace","test","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,SAAxB;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,MAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,qBAAqBC,MAArB,CAA4BL,OAAO,CAACE,OAAO,CAACI,MAAT,CAAnC,EAAqD,QAArD,EAA+DD,MAA/D,CAAsEH,OAAO,CAACK,cAA9E,EAA8F,IAA9F,EAAoGF,MAApG,CAA2GH,OAAO,CAACM,aAAR,GAAwB,EAAxB,GAA6B,GAAxI,EAA6I,GAA7I,CAAX,CAAb;AACA,SAAOL,MAAP;AACD;;AAED,IAAIM,uBAAuB,GAAG;AAC5BD,EAAAA,aAAa,EAAE,KADa;AAE5BD,EAAAA,cAAc,EAAE,IAFY;AAG5BD,EAAAA,MAAM,EAAE;AAHoB,CAA9B;AAKA,IAAII,SAAS,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,CAAhB;AACA,eAAe,SAASC,SAAT,CAAmBC,GAAnB,EAAwBV,OAAxB,EAAiC;AAC9CJ,EAAAA,YAAY,CAACc,GAAD,CAAZ;AACAV,EAAAA,OAAO,GAAGL,KAAK,CAACK,OAAD,EAAUO,uBAAV,CAAf;;AAEA,MAAIP,OAAO,CAACI,MAAR,IAAkBN,OAAtB,EAA+B;AAC7B,WAAO,CAACD,QAAQ,CAACW,SAAD,EAAYE,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,CAAZ,CAAT,IAA+CZ,aAAa,CAACC,OAAD,CAAb,CAAuBY,IAAvB,CAA4BF,GAA5B,CAAtD;AACD;;AAED,QAAM,IAAIG,KAAJ,CAAU,mBAAmBV,MAAnB,CAA0BH,OAAO,CAACI,MAAlC,EAA0C,GAA1C,CAAV,CAAN;AACD","sourcesContent":["import merge from './util/merge';\nimport assertString from './util/assertString';\nimport includes from './util/includes';\nimport { decimal } from './alpha';\n\nfunction decimalRegExp(options) {\n  var regExp = new RegExp(\"^[-+]?([0-9]+)?(\\\\\".concat(decimal[options.locale], \"[0-9]{\").concat(options.decimal_digits, \"})\").concat(options.force_decimal ? '' : '?', \"$\"));\n  return regExp;\n}\n\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\nvar blacklist = ['', '-', '+'];\nexport default function isDecimal(str, options) {\n  assertString(str);\n  options = merge(options, default_decimal_options);\n\n  if (options.locale in decimal) {\n    return !includes(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n\n  throw new Error(\"Invalid locale '\".concat(options.locale, \"'\"));\n}"]},"metadata":{},"sourceType":"module"}