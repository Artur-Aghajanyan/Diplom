{"ast":null,"code":"import assertString from './util/assertString';\nvar _int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nexport default function isInt(str, options) {\n  assertString(str);\n  options = options || {}; // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? _int : intLeadingZeroes; // Check min/max/lt/gt\n\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isInt.js"],"names":["assertString","_int","intLeadingZeroes","isInt","str","options","regex","hasOwnProperty","allow_leading_zeroes","minCheckPassed","min","maxCheckPassed","max","ltCheckPassed","lt","gtCheckPassed","gt","test"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,IAAIC,IAAI,GAAG,8BAAX;AACA,IAAIC,gBAAgB,GAAG,eAAvB;AACA,eAAe,SAASC,KAAT,CAAeC,GAAf,EAAoBC,OAApB,EAA6B;AAC1CL,EAAAA,YAAY,CAACI,GAAD,CAAZ;AACAC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAF0C,CAEjB;AACzB;;AAEA,MAAIC,KAAK,GAAGD,OAAO,CAACE,cAAR,CAAuB,sBAAvB,KAAkD,CAACF,OAAO,CAACG,oBAA3D,GAAkFP,IAAlF,GAAyFC,gBAArG,CAL0C,CAK6E;;AAEvH,MAAIO,cAAc,GAAG,CAACJ,OAAO,CAACE,cAAR,CAAuB,KAAvB,CAAD,IAAkCH,GAAG,IAAIC,OAAO,CAACK,GAAtE;AACA,MAAIC,cAAc,GAAG,CAACN,OAAO,CAACE,cAAR,CAAuB,KAAvB,CAAD,IAAkCH,GAAG,IAAIC,OAAO,CAACO,GAAtE;AACA,MAAIC,aAAa,GAAG,CAACR,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAAD,IAAiCH,GAAG,GAAGC,OAAO,CAACS,EAAnE;AACA,MAAIC,aAAa,GAAG,CAACV,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAAD,IAAiCH,GAAG,GAAGC,OAAO,CAACW,EAAnE;AACA,SAAOV,KAAK,CAACW,IAAN,CAAWb,GAAX,KAAmBK,cAAnB,IAAqCE,cAArC,IAAuDE,aAAvD,IAAwEE,aAA/E;AACD","sourcesContent":["import assertString from './util/assertString';\nvar _int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nexport default function isInt(str, options) {\n  assertString(str);\n  options = options || {}; // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? _int : intLeadingZeroes; // Check min/max/lt/gt\n\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}"]},"metadata":{},"sourceType":"module"}