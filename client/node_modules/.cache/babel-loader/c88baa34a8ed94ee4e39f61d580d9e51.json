{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nimport assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_json_options = {\n  allow_primitives: false\n};\nexport default function isJSON(str, options) {\n  assertString(str);\n\n  try {\n    options = merge(options, default_json_options);\n    var primitives = [];\n\n    if (options.allow_primitives) {\n      primitives = [null, false, true];\n    }\n\n    var obj = JSON.parse(str);\n    return primitives.includes(obj) || !!obj && _typeof(obj) === 'object';\n  } catch (e) {\n    /* ignore */\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isJSON.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","assertString","merge","default_json_options","allow_primitives","isJSON","str","options","primitives","JSON","parse","includes","e"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;;AAE1X,OAAOK,YAAP,MAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,IAAIC,oBAAoB,GAAG;AACzBC,EAAAA,gBAAgB,EAAE;AADO,CAA3B;AAGA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AAC3CN,EAAAA,YAAY,CAACK,GAAD,CAAZ;;AAEA,MAAI;AACFC,IAAAA,OAAO,GAAGL,KAAK,CAACK,OAAD,EAAUJ,oBAAV,CAAf;AACA,QAAIK,UAAU,GAAG,EAAjB;;AAEA,QAAID,OAAO,CAACH,gBAAZ,EAA8B;AAC5BI,MAAAA,UAAU,GAAG,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAAb;AACD;;AAED,QAAIZ,GAAG,GAAGa,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAV;AACA,WAAOE,UAAU,CAACG,QAAX,CAAoBf,GAApB,KAA4B,CAAC,CAACA,GAAF,IAASD,OAAO,CAACC,GAAD,CAAP,KAAiB,QAA7D;AACD,GAVD,CAUE,OAAOgB,CAAP,EAAU;AACV;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_json_options = {\n  allow_primitives: false\n};\nexport default function isJSON(str, options) {\n  assertString(str);\n\n  try {\n    options = merge(options, default_json_options);\n    var primitives = [];\n\n    if (options.allow_primitives) {\n      primitives = [null, false, true];\n    }\n\n    var obj = JSON.parse(str);\n    return primitives.includes(obj) || !!obj && _typeof(obj) === 'object';\n  } catch (e) {\n    /* ignore */\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}