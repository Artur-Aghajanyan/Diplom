{"ast":null,"code":"import assertString from './util/assertString';\nimport isFQDN from './isFQDN';\nimport isIP from './isIP';\nimport merge from './util/merge';\n/*\noptions for isURL method\n\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\nprotocols - valid protocols can be modified with this option\nrequire_host - if set as false isURL will not check if host is present in the URL\nrequire_port - if set as true isURL will check if port is present in the URL\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\n\n*/\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_port: false,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false,\n  validate_length: true\n};\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default function isURL(url, options) {\n  assertString(url);\n\n  if (!url || /[\\s<>]/.test(url)) {\n    return false;\n  }\n\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n\n  options = merge(options, default_url_options);\n\n  if (options.validate_length && url.length >= 2083) {\n    return false;\n  }\n\n  var protocol, auth, host, hostname, port, port_str, split, ipv6;\n  split = url.split('#');\n  url = split.shift();\n  split = url.split('?');\n  url = split.shift();\n  split = url.split('://');\n\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (url.substr(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n\n    split[0] = url.substr(2);\n  }\n\n  url = split.join('://');\n\n  if (url === '') {\n    return false;\n  }\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n\n  if (split.length > 1) {\n    if (options.disallow_auth) {\n      return false;\n    }\n\n    if (split[0] === '' || split[0].substr(0, 1) === ':') {\n      return false;\n    }\n\n    auth = split.shift();\n\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n\n  hostname = split.join('@');\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  } else if (options.require_port) {\n    return false;\n  }\n\n  if (!isIP(host) && !isFQDN(host, options) && (!ipv6 || !isIP(ipv6, 6))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isURL.js"],"names":["assertString","isFQDN","isIP","merge","default_url_options","protocols","require_tld","require_protocol","require_host","require_port","require_valid_protocol","allow_underscores","allow_trailing_dot","allow_protocol_relative_urls","validate_length","wrapped_ipv6","isRegExp","obj","Object","prototype","toString","call","checkHost","host","matches","i","length","match","test","isURL","url","options","indexOf","protocol","auth","hostname","port","port_str","split","ipv6","shift","toLowerCase","substr","join","disallow_auth","ipv6_match","parseInt","host_whitelist","host_blacklist"],"mappings":"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","sourcesContent":["import assertString from './util/assertString';\nimport isFQDN from './isFQDN';\nimport isIP from './isIP';\nimport merge from './util/merge';\n/*\noptions for isURL method\n\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\nprotocols - valid protocols can be modified with this option\nrequire_host - if set as false isURL will not check if host is present in the URL\nrequire_port - if set as true isURL will check if port is present in the URL\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\nvalidate_length - if set as false isURL will skip string length validation (IE maximum is 2083)\n\n*/\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_port: false,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false,\n  validate_length: true\n};\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport default function isURL(url, options) {\n  assertString(url);\n\n  if (!url || /[\\s<>]/.test(url)) {\n    return false;\n  }\n\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n\n  options = merge(options, default_url_options);\n\n  if (options.validate_length && url.length >= 2083) {\n    return false;\n  }\n\n  var protocol, auth, host, hostname, port, port_str, split, ipv6;\n  split = url.split('#');\n  url = split.shift();\n  split = url.split('?');\n  url = split.shift();\n  split = url.split('://');\n\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (url.substr(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n\n    split[0] = url.substr(2);\n  }\n\n  url = split.join('://');\n\n  if (url === '') {\n    return false;\n  }\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n\n  if (split.length > 1) {\n    if (options.disallow_auth) {\n      return false;\n    }\n\n    if (split[0] === '' || split[0].substr(0, 1) === ':') {\n      return false;\n    }\n\n    auth = split.shift();\n\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n\n  hostname = split.join('@');\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  } else if (options.require_port) {\n    return false;\n  }\n\n  if (!isIP(host) && !isFQDN(host, options) && (!ipv6 || !isIP(ipv6, 6))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}"]},"metadata":{},"sourceType":"module"}