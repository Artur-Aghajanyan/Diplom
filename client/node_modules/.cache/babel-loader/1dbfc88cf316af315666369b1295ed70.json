{"ast":null,"code":"import merge from './util/merge';\nimport assertString from './util/assertString';\n\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\".concat(options.symbol.replace(/\\W/, function (m) {\n    return \"\\\\\".concat(m);\n  }), \")\").concat(options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n      decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nexport default function isCurrency(str, options) {\n  assertString(str);\n  options = merge(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isCurrency.js"],"names":["merge","assertString","currencyRegex","options","decimal_digits","concat","digits_after_decimal","forEach","digit","index","symbol","replace","m","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","join","decimal_amount","decimal_separator","require_decimal","pattern","allow_decimal","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","RegExp","default_currency_options","isCurrency","str","test"],"mappings":"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","sourcesContent":["import merge from './util/merge';\nimport assertString from './util/assertString';\n\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\".concat(options.symbol.replace(/\\W/, function (m) {\n    return \"\\\\\".concat(m);\n  }), \")\").concat(options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n      decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : ''); // default is negative sign before symbol, but there are two other options (besides parens)\n\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  } // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n\n\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  } // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n\n\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nexport default function isCurrency(str, options) {\n  assertString(str);\n  options = merge(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}"]},"metadata":{},"sourceType":"module"}