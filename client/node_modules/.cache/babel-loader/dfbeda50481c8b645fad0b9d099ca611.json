{"ast":null,"code":"import assertString from './util/assertString';\nimport merge from './util/merge';\nvar notBase64 = /[^A-Z0-9+\\/=]/i;\nvar urlSafeBase64 = /^[A-Z0-9_\\-]*$/i;\nvar defaultBase64Options = {\n  urlSafe: false\n};\nexport default function isBase64(str, options) {\n  assertString(str);\n  options = merge(options, defaultBase64Options);\n  var len = str.length;\n\n  if (options.urlSafe) {\n    return urlSafeBase64.test(str);\n  }\n\n  if (len % 4 !== 0 || notBase64.test(str)) {\n    return false;\n  }\n\n  var firstPaddingChar = str.indexOf('=');\n  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';\n}","map":{"version":3,"sources":["/home/artur97/Diplomayin/client/node_modules/validator/es/lib/isBase64.js"],"names":["assertString","merge","notBase64","urlSafeBase64","defaultBase64Options","urlSafe","isBase64","str","options","len","length","test","firstPaddingChar","indexOf"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,IAAIC,SAAS,GAAG,gBAAhB;AACA,IAAIC,aAAa,GAAG,iBAApB;AACA,IAAIC,oBAAoB,GAAG;AACzBC,EAAAA,OAAO,EAAE;AADgB,CAA3B;AAGA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC7CR,EAAAA,YAAY,CAACO,GAAD,CAAZ;AACAC,EAAAA,OAAO,GAAGP,KAAK,CAACO,OAAD,EAAUJ,oBAAV,CAAf;AACA,MAAIK,GAAG,GAAGF,GAAG,CAACG,MAAd;;AAEA,MAAIF,OAAO,CAACH,OAAZ,EAAqB;AACnB,WAAOF,aAAa,CAACQ,IAAd,CAAmBJ,GAAnB,CAAP;AACD;;AAED,MAAIE,GAAG,GAAG,CAAN,KAAY,CAAZ,IAAiBP,SAAS,CAACS,IAAV,CAAeJ,GAAf,CAArB,EAA0C;AACxC,WAAO,KAAP;AACD;;AAED,MAAIK,gBAAgB,GAAGL,GAAG,CAACM,OAAJ,CAAY,GAAZ,CAAvB;AACA,SAAOD,gBAAgB,KAAK,CAAC,CAAtB,IAA2BA,gBAAgB,KAAKH,GAAG,GAAG,CAAtD,IAA2DG,gBAAgB,KAAKH,GAAG,GAAG,CAA3B,IAAgCF,GAAG,CAACE,GAAG,GAAG,CAAP,CAAH,KAAiB,GAAnH;AACD","sourcesContent":["import assertString from './util/assertString';\nimport merge from './util/merge';\nvar notBase64 = /[^A-Z0-9+\\/=]/i;\nvar urlSafeBase64 = /^[A-Z0-9_\\-]*$/i;\nvar defaultBase64Options = {\n  urlSafe: false\n};\nexport default function isBase64(str, options) {\n  assertString(str);\n  options = merge(options, defaultBase64Options);\n  var len = str.length;\n\n  if (options.urlSafe) {\n    return urlSafeBase64.test(str);\n  }\n\n  if (len % 4 !== 0 || notBase64.test(str)) {\n    return false;\n  }\n\n  var firstPaddingChar = str.indexOf('=');\n  return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';\n}"]},"metadata":{},"sourceType":"module"}